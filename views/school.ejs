<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>School Events</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css"
      integrity="sha512-b2QcS5SsA8tZodcDtGRELiGv5SaKSk1vDHDaQRda0htPYWZ6046lr3kJ5bAAQdpV2mmA/4v0wQF9MyU6/pDIAg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css"
      rel="stylesheet"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/js/bootstrap.min.js"
      integrity="sha512-WW8/jxkELe2CAiE4LvQfwm1rajOS8PHasCCx+knHG0gBHt8EXxS6T6tJRTGuDQVnluuAvMxWF4j8SNFDKceLFg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <link rel="stylesheet" href="style.css" />
  </head>

  <body class="">
    <!-- Header Section -->
    <%- include ('headerpink') %>

   <!-- Main Content Section -->
<div class="container mx-auto my-10">
  <!-- Heading Section -->
  <div class="text-center">
    <h1 class="text-3xl font-bold mb-4">Different School Events</h1>
  </div>

  <!-- Alert Container -->
  <div id="alertContainer"></div>

  <!--  Display Section -->
  <div class="flex zoomIn flex-wrap justify-center space-x-4" id="players-container">
    <!-- Dynamic content will be added here -->
  </div>

  <!-- Back Button Section -->
  <!-- ... (same as before) -->
</div>
    </div>
    <%- include('footer') %>
    <!-- JavaScript Section -->
    <script>
      // __________________________Function to delete a wedding event_________________________
    // Function to delete a wedding ,conference and school  event it is same as we deleted by using event id
async function deleteWeddingEvent(eventId) {
  try {
    const response = await fetch(`/deleteweddingevent/${eventId}`, {
      method: 'POST',
    });

    if (!response.ok) {
      throw new Error('Network response was not ok');
    }

    const result = await response.json();
    console.log(result);

    // Handle success
    showAlert('School event deleted successfully', 'bg-green-500', 'text-white');

    // Remove the deleted card from the UI
    const deletedCard = document.getElementById(`weddingCard-${eventId}`);
    if (deletedCard) {
      deletedCard.remove();
    } else {
      console.error('Card not found for deletion:', eventId);
    }
  } catch (error) {
    console.error('Error:', error);
    // Handle error (e.g., display an error message to the user)
    showAlert('Error deleting School event', 'bg-red-500', 'text-white');
  }
}
// function for show alert
function showAlert(message, bgClass, textClass) {
  const alertDiv = document.createElement('div');
  alertDiv.className = `fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-50 m-3 p-3 ${bgClass} ${textClass} rounded-md shadow-md z-50`;
  alertDiv.textContent = message;

  document.body.appendChild(alertDiv);

  // Remove the alert after a few seconds (adjust the timeout as needed)
  setTimeout(() => {
    document.body.removeChild(alertDiv);
  }, 5000);
}

      const fetchData = async () => {
        try {
          const response = await fetch("/school", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(),
          });

          if (!response.ok) {
            throw new Error("Network response was not ok");
          }

          const playersData = await response.json();
          console.log("Players Data:", playersData);

          // Create HTML cards dynamically
          const playersContainer = document.getElementById("players-container");
          const imageurls = [
            "../images/events (4).jpg",
            "../images/events (2).jpg",
            "../images/events (3).jpg",
            "../images/events (1).jpg",
            "../images/events (6).jpg",
            "../images/events (2).jpg",
            "../images/events (5).jpg",
            "../images/events (6).jpg",
          ];
          playersData.forEach((wedding, index) => {
            console.log("School Data:", wedding); // Check the wedding data

            const card = document.createElement("div");
            const imageUrl = imageurls[index] || "../images/logo.png";
            const eventId = wedding[0]; // Assuming event ID is in the first position of the array

            card.id = `weddingCard-${eventId}`; // Add an id to the card
            card.className = "card w-1/4 m-4 overflow-hidden shadow-lg bg-pink-500 text-white";

card.innerHTML = `
  <div class="flex flex-col h-full">
    <img src="${imageUrl}" class="w-full h-48 object-cover" alt="Event Image">
    <div class="flex-grow p-6 flex flex-col">
      <h2 class="text-2xl font-bold mb-3">${wedding[3]}</h2>
      <p class="text-sm mb-2"><b>Description:</b> ${wedding[2]}</p>
      <p class="text-sm mb-2"><b>Event Type:</b> ${wedding[1]}</p>
      <p class="text-sm mb-2"><b>Capacity:</b> ${wedding[4]}</p>
      <p class="text-sm mb-2"><b>Event No#</b> ${eventId}</p>
      <button onclick="deleteWeddingEvent('${eventId}')" class="mt-auto text-white bg-red-500 hover:bg-red-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Delete</button>
    </div>
  </div>
`;

  

            // If you want to add a subtle hover effect
            card.addEventListener("mouseenter", () => {
              card.classList.add(
                "transform",
                "scale-105",
                "transition-transform"
              );
            });

            card.addEventListener("mouseleave", () => {
              card.classList.remove("transform", "scale-105");
            });

            // Add the card to the container
            playersContainer.appendChild(card);
          });
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      };

      document.addEventListener("DOMContentLoaded", fetchData);
    </script>
  </body>
</html>
